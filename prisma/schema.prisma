datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Passwords?
  accounts Accounts[]
  transactions Transactions[]
  installments Installments[]
  scheduled Scheduled[]
  currencies Currencies[]
  categories Categories[]
}

model Passwords {
  hash String

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Currencies {
  id String @id @default(cuid())

  name String @unique
  code String @unique

  accounts Accounts[]
  transactions Transactions[]
  installments Installments[]
  scheduled Scheduled[]

  createdAt DateTime @default(now())

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Categories {
  id String @id @default(cuid())
  
  name String @unique
  icon String
  color String

  transaction Transactions[]
  installments Installments[]
  scheduled Scheduled[]

  createdAt DateTime @default(now())

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Accounts {
  id String @id @default(cuid())

  name String @unique
  balance Decimal
  icon String
  color String
  main Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  currency  Currencies  @relation(fields: [currencyId], references: [id])
  currencyId String
  
  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  installments Installments[]
  scheduled Scheduled[]
}

model Transactions {
  id  String  @id @default(cuid())

  amount Decimal
  title String
  description String?
  type String
  createdAt DateTime @default(now())

  installment Installments? @relation(fields: [installmentId], references: [id])
  installmentId String?

  scheduled Scheduled? @relation(fields: [scheduledId], references: [id])
  scheduledId String?

  currency  Currencies  @relation(fields: [currencyId], references: [id])
  currencyId String
  
  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Categories   @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Installments {
  id String @id @default(cuid())

  amount Decimal
  title String
  description String?
  installments Int
  paidInstallments Int
  active Boolean @default(true)
  firstPaymentDate DateTime @default(now())

  transactions Transactions[]

  account Accounts @relation(fields: [accountId], references: [id])
  accountId String

  currency  Currencies  @relation(fields: [currencyId], references: [id])
  currencyId String

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Categories   @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Scheduled {
  id String @id @default(cuid())

  amount Decimal
  title String
  description String?
  from DateTime
  to DateTime?
  active Boolean @default(true)

  transactions Transactions[]

  account Accounts @relation(fields: [accountId], references: [id])
  accountId String

  currency  Currencies  @relation(fields: [currencyId], references: [id])
  currencyId String

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Categories   @relation(fields: [categoryId], references: [id])
  categoryId String
}